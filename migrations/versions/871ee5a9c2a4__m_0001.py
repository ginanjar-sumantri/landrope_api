"""_m_0001

Revision ID: 871ee5a9c2a4
Revises: 
Create Date: 2023-10-11 19:48:48.420363

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
import geoalchemy2


# revision identifiers, used by Alembic.
revision = '871ee5a9c2a4'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('main_project',
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('last_tahap', sa.Integer(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['worker.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['worker.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_main_project_id'), 'main_project', ['id'], unique=False)
    op.create_table('sub_project',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('project_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('main_project_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['worker.id'], ),
    sa.ForeignKeyConstraint(['main_project_id'], ['main_project.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['worker.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sub_project_id'), 'sub_project', ['id'], unique=False)
    op.create_table('payment_detail',
    sa.Column('payment_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('invoice_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('amount', sa.Numeric(), nullable=True),
    sa.Column('is_void', sa.Boolean(), nullable=False),
    sa.Column('void_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['worker.id'], ),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoice.id'], ),
    sa.ForeignKeyConstraint(['payment_id'], ['payment.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['worker.id'], ),
    sa.ForeignKeyConstraint(['void_by_id'], ['worker.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payment_detail_id'), 'payment_detail', ['id'], unique=False)
    op.add_column('bidang', sa.Column('sub_project_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'bidang', 'sub_project', ['sub_project_id'], ['id'])
    op.add_column('bidang_overlap', sa.Column('luas_bayar', sa.Numeric(), nullable=True))
    op.add_column('bidang_overlap', sa.Column('kategori', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('bidang_overlap', sa.Column('harga_transaksi', sa.Numeric(), nullable=True))
    op.add_column('hasil_peta_lokasi', sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('invoice', sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('payment', sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('payment', sa.Column('pay_to', sqlmodel.sql.sqltypes.AutoString(), nullable=False))
    op.add_column('payment', sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('payment', sa.Column('payment_date', sa.Date(), nullable=False))
    op.add_column('payment', sa.Column('reference', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('payment', sa.Column('is_void', sa.Boolean(), nullable=True))
    op.add_column('payment', sa.Column('void_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'payment', 'worker', ['void_by_id'], ['id'])
    op.add_column('project', sa.Column('main_project_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'project', 'main_project', ['main_project_id'], ['id'])
    op.drop_column('section', 'last_tahap')
    op.add_column('tahap', sa.Column('sub_project_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'tahap', 'sub_project', ['sub_project_id'], ['id'])
    op.add_column('termin', sa.Column('nomor_memo', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('termin', sa.Column('tanggal_rencana_transaksi', sa.Date(), nullable=True))
    op.add_column('termin', sa.Column('notaris_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('termin', sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.create_foreign_key(None, 'termin', 'notaris', ['notaris_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'termin', type_='foreignkey')
    op.drop_column('termin', 'remark')
    op.drop_column('termin', 'notaris_id')
    op.drop_column('termin', 'tanggal_rencana_transaksi')
    op.drop_column('termin', 'nomor_memo')
    op.drop_constraint(None, 'tahap', type_='foreignkey')
    op.drop_column('tahap', 'sub_project_id')
    op.add_column('section', sa.Column('last_tahap', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'project', type_='foreignkey')
    op.drop_column('project', 'main_project_id')
    op.drop_constraint(None, 'payment', type_='foreignkey')
    op.drop_column('payment', 'void_by_id')
    op.drop_column('payment', 'is_void')
    op.drop_column('payment', 'reference')
    op.drop_column('payment', 'payment_date')
    op.drop_column('payment', 'remark')
    op.drop_column('payment', 'pay_to')
    op.drop_column('payment', 'code')
    op.drop_column('invoice', 'code')
    op.drop_column('hasil_peta_lokasi', 'remark')
    op.drop_column('bidang_overlap', 'harga_transaksi')
    op.drop_column('bidang_overlap', 'kategori')
    op.drop_column('bidang_overlap', 'luas_bayar')
    op.drop_constraint(None, 'bidang', type_='foreignkey')
    op.drop_column('bidang', 'sub_project_id')
    op.drop_index(op.f('ix_payment_detail_id'), table_name='payment_detail')
    op.drop_table('payment_detail')
    op.drop_index(op.f('ix_sub_project_id'), table_name='sub_project')
    op.drop_table('sub_project')
    op.drop_index(op.f('ix_main_project_id'), table_name='main_project')
    op.drop_table('main_project')
    # ### end Alembic commands ###
