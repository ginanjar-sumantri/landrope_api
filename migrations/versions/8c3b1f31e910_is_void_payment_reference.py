"""is void payment & reference

Revision ID: 8c3b1f31e910
Revises: c1b5c93a653c
Create Date: 2023-10-10 16:36:18.102548

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
import geoalchemy2
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '8c3b1f31e910'
down_revision = 'c1b5c93a653c'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('payment', sa.Column('reference', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('payment', sa.Column('is_void', sa.Boolean(), nullable=True))
    op.add_column('payment_detail', sa.Column('void_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('payment_detail', sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.drop_constraint('payment_detail_void_by_fkey', 'payment_detail', type_='foreignkey')
    op.create_foreign_key(None, 'payment_detail', 'worker', ['void_by_id'], ['id'])
    op.drop_column('payment_detail', 'void_by')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('payment_detail', sa.Column('void_by', postgresql.UUID(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'payment_detail', type_='foreignkey')
    op.create_foreign_key('payment_detail_void_by_fkey', 'payment_detail', 'worker', ['void_by'], ['id'])
    op.drop_column('payment_detail', 'remark')
    op.drop_column('payment_detail', 'void_by_id')
    op.drop_column('payment', 'is_void')
    op.drop_column('payment', 'reference')
    # ### end Alembic commands ###
