"""7_Update PTSK & add SKPT table

Revision ID: ba11d3bf7fe3
Revises: e5a239f73392
Create Date: 2023-04-27 14:16:33.873930

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
import geoalchemy2


# revision identifiers, used by Alembic.
revision = 'ba11d3bf7fe3'
down_revision = 'e5a239f73392'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('skpt',
    sa.Column('geom', geoalchemy2.types.Geometry(from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('kategori', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('luas', sa.Numeric(), nullable=False),
    sa.Column('nomor_sk', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.Column('tanggal_tahun_SK', sa.Date(), nullable=True),
    sa.Column('tanggal_jatuh_tempo', sa.Date(), nullable=True),
    sa.Column('ptsk_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['ptsk_id'], ['ptsk.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # op.create_index('idx_skpt_geom', 'skpt', ['geom'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_skpt_id'), 'skpt', ['id'], unique=False)
    op.create_table('bidangoverlap',
    sa.Column('geom', geoalchemy2.types.Geometry(from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('id_bidang', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('nama_pemilik', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('luas_surat', sa.Numeric(), nullable=False),
    sa.Column('alas_hak', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('no_peta', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('planing_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('skpt_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['planing_id'], ['planing.id'], ),
    sa.ForeignKeyConstraint(['skpt_id'], ['skpt.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # op.create_index('idx_bidangoverlap_geom', 'bidangoverlap', ['geom'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_bidangoverlap_id'), 'bidangoverlap', ['id'], unique=False)
    op.create_table('rincik',
    sa.Column('geom', geoalchemy2.types.Geometry(from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('id_rincik', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('estimasi_nama_pemilik', sqlmodel.sql.sqltypes.AutoString(length=250), nullable=False),
    sa.Column('luas', sa.Numeric(), nullable=False),
    sa.Column('category', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('alas_hak', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('jenis_dokumen', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('no_peta', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('jenis_lahan_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('planing_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('skpt_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['jenis_lahan_id'], ['jenis_lahan.id'], ),
    sa.ForeignKeyConstraint(['planing_id'], ['planing.id'], ),
    sa.ForeignKeyConstraint(['skpt_id'], ['skpt.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # op.create_index('idx_rincik_geom', 'rincik', ['geom'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_rincik_id'), 'rincik', ['id'], unique=False)
    op.create_table('bidang',
    sa.Column('geom', geoalchemy2.types.Geometry(from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('id_bidang', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('nama_pemilik', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('luas_surat', sa.Numeric(), nullable=False),
    sa.Column('alas_hak', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('no_peta', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('planing_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('skpt_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('rincik_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['planing_id'], ['planing.id'], ),
    sa.ForeignKeyConstraint(['rincik_id'], ['rincik.id'], ),
    sa.ForeignKeyConstraint(['skpt_id'], ['skpt.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # op.create_index('idx_bidang_geom', 'bidang', ['geom'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_bidang_id'), 'bidang', ['id'], unique=False)
    op.create_table('draft',
    sa.Column('geom', geoalchemy2.types.Geometry(from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('rincik_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['rincik_id'], ['rincik.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # op.create_index('idx_draft_geom', 'draft', ['geom'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_draft_id'), 'draft', ['id'], unique=False)
    op.create_table('mappingbidangoverlap',
    sa.Column('bidang_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('bidang_overlap_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('luas', sa.Numeric(), nullable=False),
    sa.ForeignKeyConstraint(['bidang_id'], ['bidang.id'], ),
    sa.ForeignKeyConstraint(['bidang_overlap_id'], ['bidangoverlap.id'], ),
    sa.PrimaryKeyConstraint('bidang_id', 'bidang_overlap_id')
    )
    op.drop_column('ptsk', 'status')
    op.drop_column('ptsk', 'luas')
    op.drop_column('ptsk', 'kategori')
    op.drop_column('ptsk', 'tanggal_jatuh_tempo')
    op.drop_column('ptsk', 'nomor_sk')
    op.drop_column('ptsk', 'tanggal_tahun_SK')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('ptsk', sa.Column('tanggal_tahun_SK', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('ptsk', sa.Column('nomor_sk', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('ptsk', sa.Column('tanggal_jatuh_tempo', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('ptsk', sa.Column('kategori', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('ptsk', sa.Column('luas', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('ptsk', sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_table('mappingbidangoverlap')
    op.drop_index(op.f('ix_draft_id'), table_name='draft')
    op.drop_index('idx_draft_geom', table_name='draft', postgresql_using='gist')
    op.drop_table('draft')
    op.drop_index(op.f('ix_bidang_id'), table_name='bidang')
    op.drop_index('idx_bidang_geom', table_name='bidang', postgresql_using='gist')
    op.drop_table('bidang')
    op.drop_index(op.f('ix_rincik_id'), table_name='rincik')
    op.drop_index('idx_rincik_geom', table_name='rincik', postgresql_using='gist')
    op.drop_table('rincik')
    op.drop_index(op.f('ix_bidangoverlap_id'), table_name='bidangoverlap')
    op.drop_index('idx_bidangoverlap_geom', table_name='bidangoverlap', postgresql_using='gist')
    op.drop_table('bidangoverlap')
    op.drop_index(op.f('ix_skpt_id'), table_name='skpt')
    op.drop_index('idx_skpt_geom', table_name='skpt', postgresql_using='gist')
    op.drop_table('skpt')
    # ### end Alembic commands ###
