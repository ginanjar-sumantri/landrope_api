"""Import Log

Revision ID: 0e7d16bebf36
Revises: 
Create Date: 2023-07-13 18:58:48.595749

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
import geoalchemy2


# revision identifiers, used by Alembic.
revision = '0e7d16bebf36'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('import_log',
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('file_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('file_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['worker.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['worker.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_import_log_id'), 'import_log', ['id'], unique=False)
    op.add_column('beban_biaya', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('beban_biaya', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'beban_biaya', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'beban_biaya', 'worker', ['created_by_id'], ['id'])
    op.add_column('bidang', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('bidang', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'bidang', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'bidang', 'worker', ['created_by_id'], ['id'])
    op.add_column('bundle_dt', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('bundle_dt', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'bundle_dt', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'bundle_dt', 'worker', ['created_by_id'], ['id'])
    op.add_column('bundle_hd', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('bundle_hd', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'bundle_hd', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'bundle_hd', 'worker', ['created_by_id'], ['id'])
    op.add_column('checklist_dokumen', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('checklist_dokumen', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'checklist_dokumen', 'worker', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'checklist_dokumen', 'worker', ['updated_by_id'], ['id'])
    op.add_column('code_counter', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('code_counter', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'code_counter', 'worker', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'code_counter', 'worker', ['updated_by_id'], ['id'])
    op.add_column('desa', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('desa', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'desa', 'worker', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'desa', 'worker', ['updated_by_id'], ['id'])
    op.add_column('dokumen', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('dokumen', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'dokumen', 'worker', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'dokumen', 'worker', ['updated_by_id'], ['id'])
    op.add_column('draft', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('draft', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'draft', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'draft', 'worker', ['created_by_id'], ['id'])
    op.add_column('gps', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('gps', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'gps', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'gps', 'worker', ['created_by_id'], ['id'])
    op.add_column('harga_standard', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('harga_standard', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'harga_standard', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'harga_standard', 'worker', ['created_by_id'], ['id'])
    op.add_column('jenis_lahan', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('jenis_lahan', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'jenis_lahan', 'worker', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'jenis_lahan', 'worker', ['updated_by_id'], ['id'])
    op.add_column('jenis_surat', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('jenis_surat', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'jenis_surat', 'worker', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'jenis_surat', 'worker', ['updated_by_id'], ['id'])
    op.add_column('kjb_beban_biaya', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('kjb_beban_biaya', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'kjb_beban_biaya', 'worker', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'kjb_beban_biaya', 'worker', ['updated_by_id'], ['id'])
    op.add_column('kjb_dt', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('kjb_dt', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'kjb_dt', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'kjb_dt', 'worker', ['created_by_id'], ['id'])
    op.add_column('kjb_harga', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('kjb_harga', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'kjb_harga', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'kjb_harga', 'worker', ['created_by_id'], ['id'])
    op.add_column('kjb_hd', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('kjb_hd', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'kjb_hd', 'worker', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'kjb_hd', 'worker', ['updated_by_id'], ['id'])
    op.add_column('kjb_penjual', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('kjb_penjual', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'kjb_penjual', 'worker', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'kjb_penjual', 'worker', ['updated_by_id'], ['id'])
    op.add_column('kjb_rekening', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('kjb_rekening', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'kjb_rekening', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'kjb_rekening', 'worker', ['created_by_id'], ['id'])
    op.add_column('kjb_termin', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('kjb_termin', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'kjb_termin', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'kjb_termin', 'worker', ['created_by_id'], ['id'])
    op.add_column('kontak', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('kontak', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'kontak', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'kontak', 'worker', ['created_by_id'], ['id'])
    op.add_column('manager', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('manager', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'manager', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'manager', 'worker', ['created_by_id'], ['id'])
    op.add_column('mapping_bidang_overlap', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('mapping_bidang_overlap', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'mapping_bidang_overlap', 'worker', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'mapping_bidang_overlap', 'worker', ['updated_by_id'], ['id'])
    op.add_column('notaris', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('notaris', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'notaris', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'notaris', 'worker', ['created_by_id'], ['id'])
    op.add_column('pemilik', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('pemilik', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'pemilik', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'pemilik', 'worker', ['created_by_id'], ['id'])
    op.add_column('planing', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('planing', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'planing', 'worker', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'planing', 'worker', ['updated_by_id'], ['id'])
    op.add_column('project', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('project', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'project', 'worker', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'project', 'worker', ['updated_by_id'], ['id'])
    op.add_column('ptsk', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('ptsk', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'ptsk', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'ptsk', 'worker', ['created_by_id'], ['id'])
    op.add_column('rekening', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('rekening', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'rekening', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'rekening', 'worker', ['created_by_id'], ['id'])
    op.add_column('request_peta_lokasi', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('request_peta_lokasi', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'request_peta_lokasi', 'worker', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'request_peta_lokasi', 'worker', ['updated_by_id'], ['id'])
    op.add_column('role', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('role', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'role', 'worker', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'role', 'worker', ['updated_by_id'], ['id'])
    op.add_column('sales', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('sales', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'sales', 'worker', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'sales', 'worker', ['updated_by_id'], ['id'])
    op.add_column('section', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('section', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'section', 'worker', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'section', 'worker', ['updated_by_id'], ['id'])
    op.add_column('skpt', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('skpt', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'skpt', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'skpt', 'worker', ['created_by_id'], ['id'])
    op.add_column('skpt_dt', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('skpt_dt', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'skpt_dt', 'worker', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'skpt_dt', 'worker', ['updated_by_id'], ['id'])
    op.add_column('tanda_terima_notaris_dt', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('tanda_terima_notaris_dt', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'tanda_terima_notaris_dt', 'worker', ['created_by_id'], ['id'])
    op.create_foreign_key(None, 'tanda_terima_notaris_dt', 'worker', ['updated_by_id'], ['id'])
    op.add_column('tanda_terima_notaris_hd', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('tanda_terima_notaris_hd', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'tanda_terima_notaris_hd', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'tanda_terima_notaris_hd', 'worker', ['created_by_id'], ['id'])
    op.add_column('worker', sa.Column('created_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('worker', sa.Column('updated_by_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.create_foreign_key(None, 'worker', 'worker', ['updated_by_id'], ['id'])
    op.create_foreign_key(None, 'worker', 'worker', ['created_by_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'worker', type_='foreignkey')
    op.drop_constraint(None, 'worker', type_='foreignkey')
    op.drop_column('worker', 'updated_by_id')
    op.drop_column('worker', 'created_by_id')
    op.drop_constraint(None, 'tanda_terima_notaris_hd', type_='foreignkey')
    op.drop_constraint(None, 'tanda_terima_notaris_hd', type_='foreignkey')
    op.drop_column('tanda_terima_notaris_hd', 'updated_by_id')
    op.drop_column('tanda_terima_notaris_hd', 'created_by_id')
    op.drop_constraint(None, 'tanda_terima_notaris_dt', type_='foreignkey')
    op.drop_constraint(None, 'tanda_terima_notaris_dt', type_='foreignkey')
    op.drop_column('tanda_terima_notaris_dt', 'updated_by_id')
    op.drop_column('tanda_terima_notaris_dt', 'created_by_id')
    op.drop_constraint(None, 'skpt_dt', type_='foreignkey')
    op.drop_constraint(None, 'skpt_dt', type_='foreignkey')
    op.drop_column('skpt_dt', 'updated_by_id')
    op.drop_column('skpt_dt', 'created_by_id')
    op.drop_constraint(None, 'skpt', type_='foreignkey')
    op.drop_constraint(None, 'skpt', type_='foreignkey')
    op.drop_column('skpt', 'updated_by_id')
    op.drop_column('skpt', 'created_by_id')
    op.drop_constraint(None, 'section', type_='foreignkey')
    op.drop_constraint(None, 'section', type_='foreignkey')
    op.drop_column('section', 'updated_by_id')
    op.drop_column('section', 'created_by_id')
    op.drop_constraint(None, 'sales', type_='foreignkey')
    op.drop_constraint(None, 'sales', type_='foreignkey')
    op.drop_column('sales', 'updated_by_id')
    op.drop_column('sales', 'created_by_id')
    op.drop_constraint(None, 'role', type_='foreignkey')
    op.drop_constraint(None, 'role', type_='foreignkey')
    op.drop_column('role', 'updated_by_id')
    op.drop_column('role', 'created_by_id')
    op.drop_constraint(None, 'request_peta_lokasi', type_='foreignkey')
    op.drop_constraint(None, 'request_peta_lokasi', type_='foreignkey')
    op.drop_column('request_peta_lokasi', 'updated_by_id')
    op.drop_column('request_peta_lokasi', 'created_by_id')
    op.drop_constraint(None, 'rekening', type_='foreignkey')
    op.drop_constraint(None, 'rekening', type_='foreignkey')
    op.drop_column('rekening', 'updated_by_id')
    op.drop_column('rekening', 'created_by_id')
    op.drop_constraint(None, 'ptsk', type_='foreignkey')
    op.drop_constraint(None, 'ptsk', type_='foreignkey')
    op.drop_column('ptsk', 'updated_by_id')
    op.drop_column('ptsk', 'created_by_id')
    op.drop_constraint(None, 'project', type_='foreignkey')
    op.drop_constraint(None, 'project', type_='foreignkey')
    op.drop_column('project', 'updated_by_id')
    op.drop_column('project', 'created_by_id')
    op.drop_constraint(None, 'planing', type_='foreignkey')
    op.drop_constraint(None, 'planing', type_='foreignkey')
    op.drop_column('planing', 'updated_by_id')
    op.drop_column('planing', 'created_by_id')
    op.drop_constraint(None, 'pemilik', type_='foreignkey')
    op.drop_constraint(None, 'pemilik', type_='foreignkey')
    op.drop_column('pemilik', 'updated_by_id')
    op.drop_column('pemilik', 'created_by_id')
    op.drop_constraint(None, 'notaris', type_='foreignkey')
    op.drop_constraint(None, 'notaris', type_='foreignkey')
    op.drop_column('notaris', 'updated_by_id')
    op.drop_column('notaris', 'created_by_id')
    op.drop_constraint(None, 'mapping_bidang_overlap', type_='foreignkey')
    op.drop_constraint(None, 'mapping_bidang_overlap', type_='foreignkey')
    op.drop_column('mapping_bidang_overlap', 'updated_by_id')
    op.drop_column('mapping_bidang_overlap', 'created_by_id')
    op.drop_constraint(None, 'manager', type_='foreignkey')
    op.drop_constraint(None, 'manager', type_='foreignkey')
    op.drop_column('manager', 'updated_by_id')
    op.drop_column('manager', 'created_by_id')
    op.drop_constraint(None, 'kontak', type_='foreignkey')
    op.drop_constraint(None, 'kontak', type_='foreignkey')
    op.drop_column('kontak', 'updated_by_id')
    op.drop_column('kontak', 'created_by_id')
    op.drop_constraint(None, 'kjb_termin', type_='foreignkey')
    op.drop_constraint(None, 'kjb_termin', type_='foreignkey')
    op.drop_column('kjb_termin', 'updated_by_id')
    op.drop_column('kjb_termin', 'created_by_id')
    op.drop_constraint(None, 'kjb_rekening', type_='foreignkey')
    op.drop_constraint(None, 'kjb_rekening', type_='foreignkey')
    op.drop_column('kjb_rekening', 'updated_by_id')
    op.drop_column('kjb_rekening', 'created_by_id')
    op.drop_constraint(None, 'kjb_penjual', type_='foreignkey')
    op.drop_constraint(None, 'kjb_penjual', type_='foreignkey')
    op.drop_column('kjb_penjual', 'updated_by_id')
    op.drop_column('kjb_penjual', 'created_by_id')
    op.drop_constraint(None, 'kjb_hd', type_='foreignkey')
    op.drop_constraint(None, 'kjb_hd', type_='foreignkey')
    op.drop_column('kjb_hd', 'updated_by_id')
    op.drop_column('kjb_hd', 'created_by_id')
    op.drop_constraint(None, 'kjb_harga', type_='foreignkey')
    op.drop_constraint(None, 'kjb_harga', type_='foreignkey')
    op.drop_column('kjb_harga', 'updated_by_id')
    op.drop_column('kjb_harga', 'created_by_id')
    op.drop_constraint(None, 'kjb_dt', type_='foreignkey')
    op.drop_constraint(None, 'kjb_dt', type_='foreignkey')
    op.drop_column('kjb_dt', 'updated_by_id')
    op.drop_column('kjb_dt', 'created_by_id')
    op.drop_constraint(None, 'kjb_beban_biaya', type_='foreignkey')
    op.drop_constraint(None, 'kjb_beban_biaya', type_='foreignkey')
    op.drop_column('kjb_beban_biaya', 'updated_by_id')
    op.drop_column('kjb_beban_biaya', 'created_by_id')
    op.drop_constraint(None, 'jenis_surat', type_='foreignkey')
    op.drop_constraint(None, 'jenis_surat', type_='foreignkey')
    op.drop_column('jenis_surat', 'updated_by_id')
    op.drop_column('jenis_surat', 'created_by_id')
    op.drop_constraint(None, 'jenis_lahan', type_='foreignkey')
    op.drop_constraint(None, 'jenis_lahan', type_='foreignkey')
    op.drop_column('jenis_lahan', 'updated_by_id')
    op.drop_column('jenis_lahan', 'created_by_id')
    op.drop_constraint(None, 'harga_standard', type_='foreignkey')
    op.drop_constraint(None, 'harga_standard', type_='foreignkey')
    op.drop_column('harga_standard', 'updated_by_id')
    op.drop_column('harga_standard', 'created_by_id')
    op.drop_constraint(None, 'gps', type_='foreignkey')
    op.drop_constraint(None, 'gps', type_='foreignkey')
    op.drop_column('gps', 'updated_by_id')
    op.drop_column('gps', 'created_by_id')
    op.drop_constraint(None, 'draft', type_='foreignkey')
    op.drop_constraint(None, 'draft', type_='foreignkey')
    op.drop_column('draft', 'updated_by_id')
    op.drop_column('draft', 'created_by_id')
    op.drop_constraint(None, 'dokumen', type_='foreignkey')
    op.drop_constraint(None, 'dokumen', type_='foreignkey')
    op.drop_column('dokumen', 'updated_by_id')
    op.drop_column('dokumen', 'created_by_id')
    op.drop_constraint(None, 'desa', type_='foreignkey')
    op.drop_constraint(None, 'desa', type_='foreignkey')
    op.drop_column('desa', 'updated_by_id')
    op.drop_column('desa', 'created_by_id')
    op.drop_constraint(None, 'code_counter', type_='foreignkey')
    op.drop_constraint(None, 'code_counter', type_='foreignkey')
    op.drop_column('code_counter', 'updated_by_id')
    op.drop_column('code_counter', 'created_by_id')
    op.drop_constraint(None, 'checklist_dokumen', type_='foreignkey')
    op.drop_constraint(None, 'checklist_dokumen', type_='foreignkey')
    op.drop_column('checklist_dokumen', 'updated_by_id')
    op.drop_column('checklist_dokumen', 'created_by_id')
    op.drop_constraint(None, 'bundle_hd', type_='foreignkey')
    op.drop_constraint(None, 'bundle_hd', type_='foreignkey')
    op.drop_column('bundle_hd', 'updated_by_id')
    op.drop_column('bundle_hd', 'created_by_id')
    op.drop_constraint(None, 'bundle_dt', type_='foreignkey')
    op.drop_constraint(None, 'bundle_dt', type_='foreignkey')
    op.drop_column('bundle_dt', 'updated_by_id')
    op.drop_column('bundle_dt', 'created_by_id')
    op.drop_constraint(None, 'bidang', type_='foreignkey')
    op.drop_constraint(None, 'bidang', type_='foreignkey')
    op.drop_column('bidang', 'updated_by_id')
    op.drop_column('bidang', 'created_by_id')
    op.drop_constraint(None, 'beban_biaya', type_='foreignkey')
    op.drop_constraint(None, 'beban_biaya', type_='foreignkey')
    op.drop_column('beban_biaya', 'updated_by_id')
    op.drop_column('beban_biaya', 'created_by_id')
    op.drop_index(op.f('ix_import_log_id'), table_name='import_log')
    op.drop_table('import_log')
    # ### end Alembic commands ###
