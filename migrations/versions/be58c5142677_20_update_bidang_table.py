"""20_Update Bidang Table

Revision ID: be58c5142677
Revises: 448b95dec1cf
Create Date: 2023-05-09 14:47:49.985770

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
import geoalchemy2
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'be58c5142677'
down_revision = '448b95dec1cf'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('bidang', sa.Column('category', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('bidang', sa.Column('jenis_dokumen', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('bidang', sa.Column('jenis_lahan_id', sqlmodel.sql.sqltypes.GUID(), nullable=True))
    op.add_column('bidang', sa.Column('tipe_proses', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.drop_constraint('bidang_rincik_id_fkey', 'bidang', type_='foreignkey')
    op.create_foreign_key(None, 'bidang', 'jenis_lahan', ['jenis_lahan_id'], ['id'])
    op.drop_column('bidang', 'rincik_id')
    op.drop_column('bidang', 'type')
    op.drop_constraint('mapping_bidang_overlap_bidang_overlap_id_fkey', 'mapping_bidang_overlap', type_='foreignkey')
    op.create_foreign_key(None, 'mapping_bidang_overlap', 'bidang', ['bidang_overlap_id'], ['id'])
    op.drop_index('idx_bidangoverlap_geom', table_name='bidangoverlap')
    op.drop_index('ix_bidangoverlap_id', table_name='bidangoverlap')
    op.drop_table('bidangoverlap')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'mapping_bidang_overlap', type_='foreignkey')
    op.create_foreign_key('mapping_bidang_overlap_bidang_overlap_id_fkey', 'mapping_bidang_overlap', 'bidangoverlap', ['bidang_overlap_id'], ['id'])
    op.add_column('bidang', sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('bidang', sa.Column('rincik_id', postgresql.UUID(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'bidang', type_='foreignkey')
    op.create_foreign_key('bidang_rincik_id_fkey', 'bidang', 'rincik', ['rincik_id'], ['id'])
    op.drop_column('bidang', 'tipe_proses')
    op.drop_column('bidang', 'jenis_lahan_id')
    op.drop_column('bidang', 'jenis_dokumen')
    op.drop_column('bidang', 'category')
    op.create_table('bidangoverlap',
    sa.Column('geom', geoalchemy2.types.Geometry(from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True),
    sa.Column('id_bidang', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('nama_pemilik', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('luas_surat', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('alas_hak', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('no_peta', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('planing_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('skpt_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['planing_id'], ['planing.id'], name='bidangoverlap_planing_id_fkey'),
    sa.ForeignKeyConstraint(['skpt_id'], ['skpt.id'], name='bidangoverlap_skpt_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='bidangoverlap_pkey')
    )
    op.create_index('ix_bidangoverlap_id', 'bidangoverlap', ['id'], unique=False)
    op.create_index('idx_bidangoverlap_geom', 'bidangoverlap', ['geom'], unique=False)
    # ### end Alembic commands ###
