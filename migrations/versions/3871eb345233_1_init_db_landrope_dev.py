"""1_init_db_landrope_dev

Revision ID: 3871eb345233
Revises: 
Create Date: 2023-07-03 15:32:19.172913

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
import geoalchemy2


# revision identifiers, used by Alembic.
revision = '3871eb345233'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('beban_biaya',
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_beban_biaya_id'), 'beban_biaya', ['id'], unique=False)
    op.create_table('code_counter',
    sa.Column('entity', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('last', sa.Integer(), nullable=True),
    sa.Column('digit', sa.Integer(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_code_counter_id'), 'code_counter', ['id'], unique=False)
    op.create_table('desa',
    sa.Column('geom', geoalchemy2.types.Geometry(from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('kecamatan', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('kota', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('luas', sa.Numeric(), nullable=False),
    sa.Column('last', sa.Integer(), nullable=True),
    sa.Column('digit', sa.Integer(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    # op.create_index('idx_desa_geom', 'desa', ['geom'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_desa_id'), 'desa', ['id'], unique=False)
    op.create_table('dokumen',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('dyn_form', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_keyword', sa.Boolean(), nullable=True),
    sa.Column('key_field', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_dokumen_id'), 'dokumen', ['id'], unique=False)
    op.create_table('draft',
    sa.Column('geom', geoalchemy2.types.Geometry(from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('rincik_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('skpt_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('planing_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    # op.create_index('idx_draft_geom', 'draft', ['geom'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_draft_id'), 'draft', ['id'], unique=False)
    op.create_table('jenis_lahan',
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_jenis_lahan_id'), 'jenis_lahan', ['id'], unique=False)
    op.create_table('jenis_surat',
    sa.Column('jenis_alashak', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_jenis_surat_id'), 'jenis_surat', ['id'], unique=False)
    op.create_table('manager',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_manager_id'), 'manager', ['id'], unique=False)
    op.create_table('notaris',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_notaris_id'), 'notaris', ['id'], unique=False)
    op.create_table('pemilik',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_pemilik_id'), 'pemilik', ['id'], unique=False)
    op.create_table('ptsk',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ptsk_id'), 'ptsk', ['id'], unique=False)
    op.create_table('role',
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_role_id'), 'role', ['id'], unique=False)
    op.create_table('section',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_section_id'), 'section', ['id'], unique=False)
    op.create_table('worker',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('oauth_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_worker_id'), 'worker', ['id'], unique=False)
    op.create_table('checklist_dokumen',
    sa.Column('jenis_alashak', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('kategori_penjual', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('jenis_bayar', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('dokumen_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['dokumen_id'], ['dokumen.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_checklist_dokumen_id'), 'checklist_dokumen', ['id'], unique=False)
    op.create_table('kontak',
    sa.Column('nomor_telepon', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('pemilik_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['pemilik_id'], ['pemilik.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_kontak_id'), 'kontak', ['id'], unique=False)
    op.create_table('project',
    sa.Column('section_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['section_id'], ['section.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_project_id'), 'project', ['id'], unique=False)
    op.create_table('rekening',
    sa.Column('nama_pemilik_rekening', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('bank_rekening', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('nomor_rekening', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('pemilik_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['pemilik_id'], ['pemilik.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_rekening_id'), 'rekening', ['id'], unique=False)
    op.create_table('sales',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('manager_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.ForeignKeyConstraint(['manager_id'], ['manager.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sales_id'), 'sales', ['id'], unique=False)
    op.create_table('skpt',
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('kategori', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('nomor_sk', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.Column('tanggal_tahun_SK', sa.Date(), nullable=True),
    sa.Column('tanggal_jatuh_tempo', sa.Date(), nullable=True),
    sa.Column('ptsk_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['ptsk_id'], ['ptsk.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_skpt_id'), 'skpt', ['id'], unique=False)
    op.create_table('workerrolelink',
    sa.Column('worker_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('role_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.ForeignKeyConstraint(['worker_id'], ['worker.id'], ),
    sa.PrimaryKeyConstraint('worker_id', 'role_id')
    )
    op.create_table('gps',
    sa.Column('geom', geoalchemy2.types.Geometry(from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('nama', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('alas_hak', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('luas', sa.Numeric(), nullable=True),
    sa.Column('desa', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('penunjuk', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('pic', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('group', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('skpt_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['skpt_id'], ['skpt.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # op.create_index('idx_gps_geom', 'gps', ['geom'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_gps_id'), 'gps', ['id'], unique=False)
    op.create_table('kjb_hd',
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('category', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('nama_group', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.Column('kategori_penjual', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('desa_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('luas_kjb', sa.Numeric(), nullable=False),
    sa.Column('tanggal_kjb', sa.DateTime(), nullable=True),
    sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('manager_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('sales_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('mediator', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('telepon_mediator', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('pemilik_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('ada_utj', sa.Boolean(), nullable=False),
    sa.Column('utj_amount', sa.Numeric(), nullable=False),
    sa.Column('satuan_bayar', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('satuan_harga', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['desa_id'], ['desa.id'], ),
    sa.ForeignKeyConstraint(['manager_id'], ['manager.id'], ),
    sa.ForeignKeyConstraint(['pemilik_id'], ['pemilik.id'], ),
    sa.ForeignKeyConstraint(['sales_id'], ['sales.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_kjb_hd_id'), 'kjb_hd', ['id'], unique=False)
    op.create_table('planing',
    sa.Column('geom', geoalchemy2.types.Geometry(from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('project_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('desa_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('luas', sa.Numeric(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['desa_id'], ['desa.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # op.create_index('idx_planing_geom', 'planing', ['geom'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_planing_id'), 'planing', ['id'], unique=False)
    op.create_table('bidang',
    sa.Column('geom', geoalchemy2.types.Geometry(from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('id_bidang', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('nama_pemilik', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('luas_surat', sa.Numeric(), nullable=False),
    sa.Column('alas_hak', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('no_peta', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('category', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('jenis_dokumen', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('jenis_lahan_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('planing_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('skpt_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('tipe_proses', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('tipe_bidang', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['jenis_lahan_id'], ['jenis_lahan.id'], ),
    sa.ForeignKeyConstraint(['planing_id'], ['planing.id'], ),
    sa.ForeignKeyConstraint(['skpt_id'], ['skpt.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # op.create_index('idx_bidang_geom', 'bidang', ['geom'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_bidang_id'), 'bidang', ['id'], unique=False)
    op.create_table('bundle_hd',
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('keyword', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('planing_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['planing_id'], ['planing.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_bundle_hd_id'), 'bundle_hd', ['id'], unique=False)
    op.create_table('harga_standard',
    sa.Column('planing_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('harga', sa.Numeric(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['planing_id'], ['planing.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_harga_standard_id'), 'harga_standard', ['id'], unique=False)
    op.create_table('kjb_beban_biaya',
    sa.Column('beban_biaya_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('beban_pembeli', sa.Boolean(), nullable=False),
    sa.Column('kjb_hd_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['beban_biaya_id'], ['beban_biaya.id'], ),
    sa.ForeignKeyConstraint(['kjb_hd_id'], ['kjb_hd.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_kjb_beban_biaya_id'), 'kjb_beban_biaya', ['id'], unique=False)
    op.create_table('kjb_harga',
    sa.Column('jenis_alashak', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('harga_akta', sa.Numeric(), nullable=True),
    sa.Column('harga_transaksi', sa.Numeric(), nullable=True),
    sa.Column('kjb_hd_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['kjb_hd_id'], ['kjb_hd.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_kjb_harga_id'), 'kjb_harga', ['id'], unique=False)
    op.create_table('kjb_rekening',
    sa.Column('nama_pemilik_rekening', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('bank_rekening', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('nomor_rekening', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('kjb_hd_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['kjb_hd_id'], ['kjb_hd.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_kjb_rekening_id'), 'kjb_rekening', ['id'], unique=False)
    op.create_table('skpt_dt',
    sa.Column('geom', geoalchemy2.types.Geometry(from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('planing_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('skpt_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('luas', sa.Numeric(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['planing_id'], ['planing.id'], ),
    sa.ForeignKeyConstraint(['skpt_id'], ['skpt.id'], ),
    sa.PrimaryKeyConstraint('planing_id', 'skpt_id', 'id')
    )
    # op.create_index('idx_skpt_dt_geom', 'skpt_dt', ['geom'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_skpt_dt_id'), 'skpt_dt', ['id'], unique=False)
    op.create_table('bundle_dt',
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('meta_data', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('bundle_hd_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('dokumen_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['bundle_hd_id'], ['bundle_hd.id'], ),
    sa.ForeignKeyConstraint(['dokumen_id'], ['dokumen.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_bundle_dt_id'), 'bundle_dt', ['id'], unique=False)
    op.create_table('kjb_dt',
    sa.Column('jenis_alashak', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('alashak', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('posisi_bidang', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('harga_akta', sa.Numeric(), nullable=False),
    sa.Column('harga_transaksi', sa.Numeric(), nullable=False),
    sa.Column('luas_surat', sa.Numeric(), nullable=False),
    sa.Column('luas_surat_by_ttn', sa.Numeric(), nullable=True),
    sa.Column('planing_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('planing_by_ttn_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('kjb_hd_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('jenis_surat_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('bundle_hd_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['bundle_hd_id'], ['bundle_hd.id'], ),
    sa.ForeignKeyConstraint(['jenis_surat_id'], ['jenis_surat.id'], ),
    sa.ForeignKeyConstraint(['kjb_hd_id'], ['kjb_hd.id'], ),
    sa.ForeignKeyConstraint(['planing_by_ttn_id'], ['planing.id'], ),
    sa.ForeignKeyConstraint(['planing_id'], ['planing.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_kjb_dt_id'), 'kjb_dt', ['id'], unique=False)
    op.create_table('kjb_termin',
    sa.Column('jenis_bayar', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('nilai', sa.Numeric(), nullable=False),
    sa.Column('kjb_harga_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['kjb_harga_id'], ['kjb_harga.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_kjb_termin_id'), 'kjb_termin', ['id'], unique=False)
    op.create_table('mapping_bidang_overlap',
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('bidang_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('bidang_overlap_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('luas', sa.Numeric(), nullable=False),
    sa.ForeignKeyConstraint(['bidang_id'], ['bidang.id'], ),
    sa.ForeignKeyConstraint(['bidang_overlap_id'], ['bidang.id'], ),
    sa.PrimaryKeyConstraint('id', 'bidang_id', 'bidang_overlap_id')
    )
    op.create_index(op.f('ix_mapping_bidang_overlap_id'), 'mapping_bidang_overlap', ['id'], unique=False)
    op.create_table('tanda_terima_notaris_hd',
    sa.Column('kjb_dt_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('jenis_alashak', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('jenis_surat_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('tanggal_tanda_terima', sa.DateTime(), nullable=True),
    sa.Column('nomor_tanda_terima', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('kategori_penjual', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('notaris_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('planing_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('luas_surat', sa.Numeric(), nullable=False),
    sa.Column('status_valid', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status_peta_lokasi', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['jenis_surat_id'], ['jenis_surat.id'], ),
    sa.ForeignKeyConstraint(['kjb_dt_id'], ['kjb_dt.id'], ),
    sa.ForeignKeyConstraint(['notaris_id'], ['notaris.id'], ),
    sa.ForeignKeyConstraint(['planing_id'], ['planing.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tanda_terima_notaris_hd_id'), 'tanda_terima_notaris_hd', ['id'], unique=False)
    op.create_table('tanda_terima_notaris_dt',
    sa.Column('tanggal_tanda_terima', sa.DateTime(), nullable=True),
    sa.Column('dokumen_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('meta_data', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('tanggal_terima_dokumen', sa.DateTime(), nullable=True),
    sa.Column('tanda_terima_notaris_hd_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['dokumen_id'], ['dokumen.id'], ),
    sa.ForeignKeyConstraint(['tanda_terima_notaris_hd_id'], ['tanda_terima_notaris_hd.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tanda_terima_notaris_dt_id'), 'tanda_terima_notaris_dt', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_tanda_terima_notaris_dt_id'), table_name='tanda_terima_notaris_dt')
    op.drop_table('tanda_terima_notaris_dt')
    op.drop_index(op.f('ix_tanda_terima_notaris_hd_id'), table_name='tanda_terima_notaris_hd')
    op.drop_table('tanda_terima_notaris_hd')
    op.drop_index(op.f('ix_mapping_bidang_overlap_id'), table_name='mapping_bidang_overlap')
    op.drop_table('mapping_bidang_overlap')
    op.drop_index(op.f('ix_kjb_termin_id'), table_name='kjb_termin')
    op.drop_table('kjb_termin')
    op.drop_index(op.f('ix_kjb_dt_id'), table_name='kjb_dt')
    op.drop_table('kjb_dt')
    op.drop_index(op.f('ix_bundle_dt_id'), table_name='bundle_dt')
    op.drop_table('bundle_dt')
    op.drop_index(op.f('ix_skpt_dt_id'), table_name='skpt_dt')
    op.drop_index('idx_skpt_dt_geom', table_name='skpt_dt', postgresql_using='gist')
    op.drop_table('skpt_dt')
    op.drop_index(op.f('ix_kjb_rekening_id'), table_name='kjb_rekening')
    op.drop_table('kjb_rekening')
    op.drop_index(op.f('ix_kjb_harga_id'), table_name='kjb_harga')
    op.drop_table('kjb_harga')
    op.drop_index(op.f('ix_kjb_beban_biaya_id'), table_name='kjb_beban_biaya')
    op.drop_table('kjb_beban_biaya')
    op.drop_index(op.f('ix_harga_standard_id'), table_name='harga_standard')
    op.drop_table('harga_standard')
    op.drop_index(op.f('ix_bundle_hd_id'), table_name='bundle_hd')
    op.drop_table('bundle_hd')
    op.drop_index(op.f('ix_bidang_id'), table_name='bidang')
    op.drop_index('idx_bidang_geom', table_name='bidang', postgresql_using='gist')
    op.drop_table('bidang')
    op.drop_index(op.f('ix_planing_id'), table_name='planing')
    op.drop_index('idx_planing_geom', table_name='planing', postgresql_using='gist')
    op.drop_table('planing')
    op.drop_index(op.f('ix_kjb_hd_id'), table_name='kjb_hd')
    op.drop_table('kjb_hd')
    op.drop_index(op.f('ix_gps_id'), table_name='gps')
    op.drop_index('idx_gps_geom', table_name='gps', postgresql_using='gist')
    op.drop_table('gps')
    op.drop_table('workerrolelink')
    op.drop_index(op.f('ix_skpt_id'), table_name='skpt')
    op.drop_table('skpt')
    op.drop_index(op.f('ix_sales_id'), table_name='sales')
    op.drop_table('sales')
    op.drop_index(op.f('ix_rekening_id'), table_name='rekening')
    op.drop_table('rekening')
    op.drop_index(op.f('ix_project_id'), table_name='project')
    op.drop_table('project')
    op.drop_index(op.f('ix_kontak_id'), table_name='kontak')
    op.drop_table('kontak')
    op.drop_index(op.f('ix_checklist_dokumen_id'), table_name='checklist_dokumen')
    op.drop_table('checklist_dokumen')
    op.drop_index(op.f('ix_worker_id'), table_name='worker')
    op.drop_table('worker')
    op.drop_index(op.f('ix_section_id'), table_name='section')
    op.drop_table('section')
    op.drop_index(op.f('ix_role_id'), table_name='role')
    op.drop_table('role')
    op.drop_index(op.f('ix_ptsk_id'), table_name='ptsk')
    op.drop_table('ptsk')
    op.drop_index(op.f('ix_pemilik_id'), table_name='pemilik')
    op.drop_table('pemilik')
    op.drop_index(op.f('ix_notaris_id'), table_name='notaris')
    op.drop_table('notaris')
    op.drop_index(op.f('ix_manager_id'), table_name='manager')
    op.drop_table('manager')
    op.drop_index(op.f('ix_jenis_surat_id'), table_name='jenis_surat')
    op.drop_table('jenis_surat')
    op.drop_index(op.f('ix_jenis_lahan_id'), table_name='jenis_lahan')
    op.drop_table('jenis_lahan')
    op.drop_index(op.f('ix_draft_id'), table_name='draft')
    op.drop_index('idx_draft_geom', table_name='draft', postgresql_using='gist')
    op.drop_table('draft')
    op.drop_index(op.f('ix_dokumen_id'), table_name='dokumen')
    op.drop_table('dokumen')
    op.drop_index(op.f('ix_desa_id'), table_name='desa')
    op.drop_index('idx_desa_geom', table_name='desa', postgresql_using='gist')
    op.drop_table('desa')
    op.drop_index(op.f('ix_code_counter_id'), table_name='code_counter')
    op.drop_table('code_counter')
    op.drop_index(op.f('ix_beban_biaya_id'), table_name='beban_biaya')
    op.drop_table('beban_biaya')
    # ### end Alembic commands ###
